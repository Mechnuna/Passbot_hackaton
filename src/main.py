import json
import random
import re
import telebot
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, WebAppInfo
from auth.config import token,adm_toke
from apilib.intra import IntraAPIClient
from auth.auth import Authentificator
from send_mail import send_mail
from valid_form import parse_date, parse_name


############### DB ################
from re import T
from fastapi import FastAPI

from config import web_app_url
from ops.manager import Manager
from crud.authorized_users import AuthorizedUserCRUD
from crud.auth_tickets import AuthTicketsCRUD
from db.base import ENGINE
from models.entry_request import EntryRequestBaseModel
from models.authorized_users import AuthorizedUsersBaseModel
from models.auth_tickets import AuthTicketsBaseModel
from datetime import date
from models.enums import Campuses, Roles
manager = Manager(ENGINE)
############### DB ################

bot = telebot.TeleBot(token)
ic = IntraAPIClient()
au = Authentificator()


def webAppKeyboard(m): #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å webapp –∫–Ω–æ–ø–∫–æ–π
	keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
	webAppTest = WebAppInfo(f"{web_app_url}/user/{m.from_user.username}")
	print("Open")
	one_butt = KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–± —Ñ–æ—Ä–º—É", web_app=webAppTest)
	keyboard.add(one_butt)
	return keyboard

#–õ–æ–≤–∏–º –≤—Å–µ –∫–æ–ª–ª-–±–µ–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
	req = call.data.split()
	if not req:
		return
	if req[0] == 'guest':
		print(call.from_user.username)
		bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥:\nMoscow, KZN,NSK?\n")
		bot.register_next_step_handler(call.message, make_guest)
		# creatable = manager.check_if_entry_request_creatable(call.from_user.username, 'OUTSIDER')
		# if (not creatable.CAN_CREATE):
		# 	bot.send_message(call.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É")
		# 	bot.send_message(call.from_user.id, creatable.MESSAGE)
		# else:
		# 	bot.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≥–æ—Å—Ç—è:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:\n")
		# 	bot.register_next_step_handler(call.message, make_request_guest)
	if req[0] == 'user':
		find_user(call.message)
	if req[0] == 'msk':
		bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫")
		bot.register_next_step_handler(call.message, intra_user)
	if req[0] == 'kzn' or req[0] == 'nvs':
		bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫")
		bot.register_next_step_handler(call.message, sber_user, "KZN")
	if req[0] == 'back':
		find_user(call.message)
	if req[0] == 'try_again':
		bot.register_next_step_handler(call.message, auth, call.mes)
	if req[0] == 'try_again':
		bot.register_next_step_handler(call.message, sber_user)
	if req[0] == "make_request":
		creatable = manager.check_if_entry_request_creatable(call.from_user.username, "LEARNER")
		if (not creatable.CAN_CREATE):
			bot.send_message(call.from_user.id, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä–º—É")
			bot.send_message(call.from_user.id, creatable.MESSAGE)
		else:
			bot.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≥–æ—Å—Ç—è:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:\n")
			bot.register_next_step_handler(call.message, make_request)
	if req[0] == "make_request_guest":
		bot.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:\n")
		bot.register_next_step_handler(call.message, make_request_guest)
	if req[0] == "see_my_app":
		show_application(call.message, call.from_user.username)
	if req[0] == "adm_app":
		all_tik = manager.select_entry_request_status_new()
		adm_watch_ticket(call.message,all_tik)
	if req[0] == "adm_make":
		creatable = manager.check_if_entry_request_creatable(call.from_user.username, "LEARNER")
		bot.send_message(call.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û –≥–æ—Å—Ç—è:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:\n")
		bot.register_next_step_handler(call.message, make_request, "ADM")

	if 'pagination' in req[0]:
      	#–†–∞—Å—Å–ø–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON
		all_tik = manager.select_entry_request_status_new()
		json_string = json.loads(req[0])
		count = json_string['CountPage']
		page = json_string['NumberPage']
				#–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º markup
		markup = InlineKeyboardMarkup()
		markup.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='adm_edit_ticket'))
        #markup –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		if page == 0:
			markup.add(InlineKeyboardButton(text=f'{page+1}/{count}', callback_data=f'no'),
                       InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                            callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                page + 1) + ",\"CountPage\":" + str(count) + "}"))
        #markup –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		elif page+1 == count:
			markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                            callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                page - 1) + ",\"CountPage\":" + str(count) + "}"),
                       InlineKeyboardButton(text=f'{page+1}/{count}', callback_data=f'no'))
        #markup –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
		else:
			markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page - 1) + ",\"CountPage\":" + str(count) + "}"),
                           InlineKeyboardButton(text=f'{page+1}/{count}', callback_data=f'no'),
                           InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(count) + "}"))
		print(page)
		print(str(all_tik[0]))
		s = const_message(all_tik[page])
		bot.edit_message_text(s, reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

def make_guest(m):
	if m.text != 'Moscow' and m.text != 'NSK' and m.text != 'KZN':
		markup = InlineKeyboardMarkup()
		markup.add(
			InlineKeyboardButton(text=f'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data="guest"))
		bot.send_message(m.chat.id, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑\n –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
	else:
		manager.create_new_auth_user(auth_user_model=AuthorizedUsersBaseModel(
					RESPONSIBLE_NICK=m.from_user.username,
					TG_NAME=m.from_user.username,
					CAMPUS=m.text,
					INITIATOR_NAME=m.from_user.username,
					ROLE="OUTSIDER"
				))
		bot.send_message(m.from_user.id, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É:\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û:\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è:\n")
		bot.register_next_step_handler(m, make_request_guest)


#—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
def const_message(all_tik):
	s = f"ID –ó–∞—è–≤–∫–∏ {all_tik.ID}\n\
		\nTelegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\
		{all_tik.TG_NAME}\n–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\
		{all_tik.RESPONSIBLE_NAME}\n–ù–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\
		{all_tik.RESPONSIBLE_NICK}\n–ö–∞–º–ø—É—Å:\n\
		{all_tik.CAMPUS}\n–ò–º—è –≥–æ—Å—Ç—è:\n\
		{all_tik.GUEST_NAME}\n\n–î–∞—Ç–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n\
		{all_tik.BOOKING_DATE}\n\n–°—Ç–∞—Ç—É—Å: "
	if all_tik.STATUS == 'new':
		s += "–∂–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è‚åõ\n"
	else:
		s += "–æ–¥–æ–±—Ä–µ–Ω–æ‚úÖ"
	return s


def adm_panel(m):
	markup = InlineKeyboardMarkup()
	markup.add(
			   InlineKeyboardButton(text=f'–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏', callback_data="adm_app"),
			   InlineKeyboardButton(text=f'–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data="adm_make"),
	)

	bot.send_message(m.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:", reply_markup=markup)


def adm_watch_ticket(m,all):
    count = len(all) - 1
    page = 0
    print(count)
    s = const_message(all[0])
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='adm_edit_ticket'))
    markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f'no'),
               InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(0) + ",\"CountPage\":" + str(count) + "}"))
    bot.send_message(m.chat.id, s, reply_markup = markup)


def adm_token(m):
	if m.text == adm_toke:
		adm_panel(m)
	else:
		print(m.text, adm_toke)

#–í—ã–±–æ—Ä –∫–∞–º–ø—É—Å–∞
def auth(m):
	print(manager.select_auth_ticket_by_name(m.from_user.username))
	try:
		if (manager.select_auth_ticket_by_name(m.from_user.username).TICKET == m.text) :
			manager.update_auth_ticket_status(m.from_user.username, "confirmed")
			auth_user = manager.select_auth_ticket_by_name(m.from_user.username)
			manager.create_new_auth_user(auth_user_model=AuthorizedUsersBaseModel(
				RESPONSIBLE_NICK=auth_user.RESPONSIBLE_NICK,
				TG_NAME=auth_user.TG_NAME,
				CAMPUS=auth_user.CAMPUS,
				INITIATOR_NAME=auth_user.INITIATOR_NAME,
				ROLE="LEARNER"
			))
			show_button(m)
			print("lol")
		else:
			markup = InlineKeyboardMarkup()
			markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'),
					InlineKeyboardButton(text=f'–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥', callback_data="retry_code") )
			bot.send_message(m.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥", reply_markup=markup)
	except Exception as e:
		pass
		print(e)

# –í—Ö–æ–¥ —Å–æ —Å–±–µ—Ä–∞ - –∞—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—Ç
def sber_user(m, campus):
	valid_token = send_mail(f"{m.text.lower()}@student.21-school.ru")
	bot.send_message(m.chat.id, f" üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {m.text}\n–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É {m.text}@student.21-school.ru,")
	manager.create_new_auth_ticket_if_not_exists(auth_model=AuthTicketsBaseModel(
		TG_NAME=f"{m.from_user.username}",
		TICKET=valid_token,
		RESPONSIBLE_NICK=m.text.lower(),
		CAMPUS=campus,
		INITIATOR_NAME=m.text.lower()
	))
	bot.register_next_step_handler(m, auth)


#–í—Ö–æ–¥ –¥–ª—è —é–∑–µ—Ä–æ–≤ —Å –∏–Ω—Ç—Ä—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∏–∫–∞
def intra_user(m):
	try:
		nik = m.text.lower()
		id_m = send_mail(m.from_user.username, "–ü–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É, –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞...")
		usr = ic.get(f"users/{nik}")
		bot.delete_message(id_m.message_id)
		valid_token = send_mail(usr.json()['email'])
		bot.send_message(m.chat.id, f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {usr.json()['displayname']}\n–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É {usr.json()['email']}")
		manager.create_new_auth_ticket_if_not_exists(auth_model=AuthTicketsBaseModel(
			TG_NAME=f"{m.from_user.username}",
			TICKET=valid_token,
			RESPONSIBLE_NICK=m.text.lower(),
			CAMPUS=usr.json()['campus'][0]['name'],
			INITIATOR_NAME=m.text.lower()
		))
		bot.register_next_step_handler(m, auth)
	except Exception as e:
		markup = InlineKeyboardMarkup()
		markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'),
				InlineKeyboardButton(text=f'–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –Ω–∏–∫', callback_data="retry_nick_intra") )
		bot.send_message(m.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–∏–∫( –ü–æ–ø—ã—Ç–∞–π—Å—è –µ—â–µ —Ä–∞–∑", reply_markup=markup)


#–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–æ—à–∫–∏
def show_button(m):
	markup =  InlineKeyboardMarkup()
	button1 = InlineKeyboardButton(text = "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="make_request")
	button2 = InlineKeyboardButton(text = "–ú–æ–∏ –ó–∞—è–≤–∫–∏",callback_data="see_my_app")
	markup.add(button1, button2)
	bot.send_message(m.chat.id, text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", reply_markup=markup)


def show_button_guest(m):
	markup =  InlineKeyboardMarkup()
	button1 = InlineKeyboardButton(text = "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="make_request_guest")
	button2 = InlineKeyboardButton(text = "–ú–æ–∏ –ó–∞—è–≤–∫–∏",callback_data="see_my_app")
	markup.add(button1, button2)
	bot.send_message(m.chat.id, text="–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", reply_markup=markup)


def show_application(m, username):
	message = ""
	message += "–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n"
	entries = manager.select_entry_request_by_tg_name(username)
	if (entries is None):
		message += "–ù–µ—Ç –∑–∞—è–≤–æ–∫"
	else:
		for entry in entries:
			message += f"ID –ó–∞—è–≤–∫–∏: {entry.ID}\n"
			message += f"–ò–º—è –≥–æ—Å—Ç—è:\n{entry.GUEST_NAME}\n–°—Ç–∞—Ç—É—Å: "
			if entry.STATUS == 'new':
				message += "–∂–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è‚åõ\n"
			else:
				message += "–æ–¥–æ–±—Ä–µ–Ω–æ‚úÖ"
			message += f"{entry.STATUS}\n"
			message += '\n'
	bot.send_message(m.chat.id, message)
	#–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

def	invalid_form(m, reason, adm=False):
	markup = InlineKeyboardMarkup()
	if adm:
		markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'),
			InlineKeyboardButton(text=f'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data="adm_make") )
	else:
		markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'),
				InlineKeyboardButton(text=f'–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data="make_request") )
	bot.send_message(m.chat.id, f"–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞.–ü—Ä–∏—á–∏–Ω–∞: {reason}\n –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)

#–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º–æ—á–∫—É
def make_request(m, adm=False):
	message = m.text.splitlines()
	if (len(message)!= 3):
		invalid_form(m, "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ", adm)
		return
	try:
		entry_data = EntryRequestBaseModel(
			TG_NAME=m.from_user.username,
			INITIATOR_NAME=parse_name(message[0]),
			GUEST_NAME=parse_name(message[1]),
			BOOKING_DATE=parse_date(message[2])
		)
	except Exception as e:
		invalid_form(m, str(e), adm)
		return
	manager.create_entry_request_using_role(m.from_user.username, entry_data)
	bot.send_message(m.chat.id, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞")
	show_button(m)
	return

#–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º–æ—á–∫—É
def make_request_guest(m):
	message = m.text.splitlines()
	if (len(message) != 2):
		invalid_form(m, "–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ")
		return
	else:
		try:
			entry_data = EntryRequestBaseModel(
				TG_NAME=m.from_user.username,
				GUEST_NAME=parse_name(message[0]),
				INITIATOR_NAME=parse_name(message[0]),
				BOOKING_DATE=parse_date(message[1])
			)
		except Exception as e:
			invalid_form(m, str(e))
			return
		manager.create_entry_request_using_role(m.from_user.username, entry_data)
		bot.send_message(m.chat.id, "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
		show_button_guest(m)
		return
	# bot.register_next_step_handler(m, push_data)

def find_user(m):
	markup = InlineKeyboardMarkup()
	markup.add(
			   InlineKeyboardButton(text=f'–ö–∞–∑–∞–Ω—å', callback_data="kzn"),
			   InlineKeyboardButton(text=f'–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', callback_data="nvs"),
			   InlineKeyboardButton(text='–ú–æ—Å–∫–≤–∞', callback_data='msk')
	)

	bot.send_message(m.chat.id, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –∫–∞–º–ø—É—Å", reply_markup=markup)


# def auth(m, valid_token):
# 	try:
# 		# –°—é–¥–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
# 		if m.text == valid_token:
# 			show_button(m)
# 		else:
# 			print(m.text,valid_token)
# 			bot.send_message(m.chat.id, "No valid")
# 			markup = InlineKeyboardMarkup()
# 			print(manager.select_auth_ticket_by_name(m.from_user.username))
# 			markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back'),
# 					InlineKeyboardButton(text=f'–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–æ–¥', callback_data="try_again"),
# 					InlineKeyboardButton(text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑', callback_data="resend_mail"), )
# 			bot.register_next_step_handler(m, auth, valid_token)
# 	except Exception as e:
# 		print(e)


#–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–æ—à–∫–∏
def show_button(m):
	usr = manager.select_auth_user_by_tg(m.chat.username)
	bot.send_message(m.chat.id, text=f"–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {usr.RESPONSIBLE_NICK}", reply_markup=webAppKeyboard(m))
	markup =  InlineKeyboardMarkup()
	button1 = InlineKeyboardButton(text = "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="make_request")
	button2 = InlineKeyboardButton(text = "–ú–æ–∏ –ó–∞—è–≤–∫–∏",callback_data="see_my_app")
	markup.add(button1, button2)
	button3 = InlineKeyboardButton(text = "–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",callback_data="edit_app")
	markup.add(button3)
	bot.send_message(m.chat.id, text="–ß–µ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)




#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def push_data(*argc):
	pass

#–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞
@bot.message_handler(commands=['start'])
def start_message(m):
	if (manager.select_auth_user_by_tg(m.from_user.username) is None):
		start_buttons(m)
	else:
		show_button(m)

def	start_buttons(m):
	markup = InlineKeyboardMarkup()
	markup.add(InlineKeyboardButton(text='–Ø –≥–æ—Å—Ç—å', callback_data='guest'),
			InlineKeyboardButton(text=f'–Ø —É—á–µ–Ω–∏–∫', callback_data="user"))
	bot.send_message( m.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º webapps!)', reply_markup=markup)


@bot.message_handler(content_types="web_app_data") #–ø–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ 
def answer(webAppMes):
   print(webAppMes) #–≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
   print(webAppMes.web_app_data.data) #–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–æ —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–ª–∏ –≤ –±–æ—Ç–∞
   bot.send_message(webAppMes.chat.id, f"–ø–æ–ª—É—á–∏–ª–∏ –∏–Ω–æ—Ñ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {webAppMes.web_app_data.data}") 


@bot.message_handler(commands=['adm'])
def adm(m):
	bot.send_message( m.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω')
	bot.register_next_step_handler(m, adm_token)


@bot.message_handler(commands=['exit'])
def exit(m):
	bot.send_message(m.chat.id, '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –≤—ã–π—Ç–∏? [Y/n]')
	bot.register_next_step_handler(m, delete)


def delete(m):
	if m.text.lower() == 'y':
		pass

if __name__ == '__main__':
	bot.polling(none_stop=True)